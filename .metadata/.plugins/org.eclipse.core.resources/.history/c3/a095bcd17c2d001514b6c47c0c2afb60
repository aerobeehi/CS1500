/*
 * HW_02_QuickSort_BinarySearch_Clarke_Lauria.cpp
 *
 *  Created on: Jul 12, 2015
 *     Author: lauriaclarke
 */

/***************************** Include Files *********************************/

#include <iostream>
#include <string>
using namespace std;

/************************** Constant Definitions *****************************/

#define string appNames[] =
{ "Pages", "Keynote", "Numbers", "Word", "PowerPoint", "Excel", "Documents",
		"Presentation", "Sheets" };

#define float appPrices[] =
{ 3.99, 2.99, 1.99, 19.99, 29.99, 39.99, 34.99, 24.99, 14.99 };

/************************** Function Prototypes ******************************/

void displayApplication(int appIndex, string appNames[], float appPrices[]);
void displayAllApplications(string appNames[], float appPrices[], int appCount);
void swapApps(int appIndex1, int appIndex2, string appNames[],
		float appPrices[]);
int pivot(int first, int last, string appNames[], float appPrices[]);
void quickSort(int first, int last, string appNames[], float appPrices[]);
int binarySearchForPrice(float searchPrice, int first, int last,
		float appPrices[]);

/************************** Variable Definitions *****************************/


/******************************************************************************/
/******************************************************************************/
int main()
{
	int foundIndex

	displayAllApplications(appNames, appPrices, 9);
	quickSort(0, 8, appNames, appPrices);
	displayAllApplications(appNames, appPrices, 9);
	foundIndex = binarySearchForPrice(25.99, 0, 9, appPrices);

	if (foundIndex == -1)
	{
		cout << "Not Found" << endl;
	}
	else
	{
		cout << "Found at index " << foundIndex << endl;
	}
	return 0;
}

/******************************************************************************
* Prints all menu options.
*
* @param void
* @return void
******************************************************************************/

void displayApplication(int appIndex, string appNames[], float appPrices[])
{
	cout << "\nApplications - \n";
	cout << "(" << appIndex << ") " << appNames[appIndex] << "  $"
			<< appPrices[appIndex] << "\n";

}

/******************************************************************************
* Prints all menu options.
*
* @param void
* @return void
******************************************************************************/

void displayAllApplications(string appNames[], float appPrices[], int appCount)
{
	cout << "\nApplications - \n";
	for (int i = 0; i < appCount; i++)
	{
		cout << "(" << i + 1 << ") " << appNames[i] << "  $" << appPrices[i]
				<< "\n";
	}
}

/******************************************************************************
* Prints all menu options.
*
* @param void
* @return void
******************************************************************************/

void swapApps(int appIndex1, int appIndex2, string appNames[],
		float appPrices[])
{
	string temporaryString;
	float temporaryFloat;

	temporaryString = appNames[appIndex1];
	temporaryFloat = appPrices[appIndex1];

	appNames[appIndex1] = appNames[appIndex2];
	appPrices[appIndex1] = appPrices[appIndex2];

	appNames[appIndex2] = temporaryString;
	appPrices[appIndex2] = temporaryFloat;
}


/******************************************************************************
* Prints all menu options.
*
* @param void
* @return void
******************************************************************************/

int pivot(int first, int last, string appNames[], float appPrices[])
{
	string pivotValue;
	int pivotIndex;

	pivotIndex = first;
	pivotValue = appNames[first];

	for (int i = first + 1; i <= last; i++)
	{
		if (appNames[i] < pivotValue)
		{
			pivotIndex++;
			swapApps(i, pivotIndex, appNames, appPrices);
		}
	}
	swapApps(first, pivotIndex, appNames, appPrices);
	return pivotIndex;
}

/******************************************************************************
* Prints all menu options.
*
* @param void
* @return void
******************************************************************************/

void quickSort(int first, int last, string appNames[], float appPrices[])
{
	int pivotIndex;

	if (first < last)
	{
		pivotIndex = pivot(first, last, appNames, appPrices);
		quickSort(first, pivotIndex - 1, appNames, appPrices);
		quickSort(pivotIndex + 1, last, appNames, appPrices);
	}
}

/******************************************************************************
* Prints all menu options.
*
* @param void
* @return void
******************************************************************************/

int binarySearchForPrice(float searchPrice, int first, int last,
		float appPrices[])
{
	int middle = (first + last) / 2;

	if (last < first)
	{
		return -1;
	}
	else if (searchPrice == appPrices[middle])
	{
		return middle;
	}
	else if (searchPrice < appPrices[middle])
	{
		return binarySearchForPrice(searchPrice, first, middle - 1, appPrices);
	}
	else if (searchPrice > appPrices[middle])
	{
		return binarySearchForPrice(searchPrice, middle + 1, last, appPrices);
	}
	return 0;
}
