/*
 * HW_02_QuickSort_BinarySearch_Clarke_Lauria.cpp
 *
 *  Created on: Jul 12, 2015
 *     Author: lauriaclarke
 */

/***************************** Include Files *********************************/

#include <iostream>
#include <string>
using namespace std;

/************************** Constant Definitions *****************************/

/************************** Function Prototypes ******************************/

void displayApplication(int appIndex, string appNames[], float appPrices[]);
void displayAllApplications(string appNames[], float appPrices[], int appCount);
void swapApps(int appIndex1, int appIndex2, string appNames[],
		float appPrices[]);
int pivot(int first, int last, float appPrices[], string appNames[]);
void quickSort(int first, int last, string appNames[], float appPrices[]);
int binarySearchForPrice(float searchPrice, int first, int last,
		float appPrices[]);

/************************** Variable Definitions *****************************/



string appNames[] =
{ "Pages", "Keynote", "Numbers", "Word", "PowerPoint", "Excel", "Documents",
		"Presentation", "Sheets" };
float appPrices[] =
{ 3.99, 2.99, 1.99, 19.99, 29.99, 39.99, 34.99, 24.99, 14.99 };

/******************************************************************************/
/******************************************************************************/
int main()
{
	int foundIndex;

	displayAllApplications(appNames, appPrices, 9);
	quickSort(0, 8, appNames, appPrices);
	displayAllApplications(appNames, appPrices, 9);
	foundIndex = binarySearchForPrice(2.99, 0, 8, appPrices);

	if (foundIndex == -1)
	{
		cout << "\nPrice not Found. Please try again.\n" << endl;
	}
	else
	{
		cout << "\nThe requested application was found at index " << foundIndex << ".\n";
		displayApplication(foundIndex, appNames, appPrices);
	}
	return 0;
}

/******************************************************************************
 * Prints the selected application and its price.
 *
 * @param  Index of desired application
 *         Array containing all application names
 *         Array containing all application prices
 * @return void
 ******************************************************************************/

void displayApplication(int appIndex, string appNames[], float appPrices[])
{
	cout << "(" << appIndex << ") " << appNames[appIndex] << "  $"
			<< appPrices[appIndex] << "\n";
}

/******************************************************************************
 * Prints all all applications and their prices.
 *
 * @param  Array containing all application names
 *         Array containing all application prices
 *         Number of applicaitons
 * @return void
 ******************************************************************************/

void displayAllApplications(string appNames[], float appPrices[], int appCount)
{
	cout << "\n - Applications - \n";
	for (int i = 0; i < appCount; i++)
	{
		cout << "(" << i << ") " << appNames[i] << "  $" << appPrices[i]
				<< "\n";
	}
}

/******************************************************************************
 * Given two indicies, reverses the position of the corresponding elements
 * within the name and price arrays.
 *
 * @param  Index of first element to be swapped
 *         Index of second element to be swapped
 *         Array of application names
 *         Array of application prices
 * @return void
 ******************************************************************************/

void swapApps(int appIndex1, int appIndex2, string appNames[],
		float appPrices[])
{
	string temporaryString;
	float temporaryFloat;

	temporaryString = appNames[appIndex1];
	temporaryFloat = appPrices[appIndex1];

	appNames[appIndex1] = appNames[appIndex2];
	appPrices[appIndex1] = appPrices[appIndex2];

	appNames[appIndex2] = temporaryString;
	appPrices[appIndex2] = temporaryFloat;
}

/******************************************************************************
 * Starting with the second element in the array, pivot compares the value of
 * the element found at pivotIndex to pivotValue. Initially, these are equal
 * to the first and second elements in the array. If the value of the second
 * element is smaller than the first element, the positions of the two elements
 * are reversed using 'swap' and the search index in incremented by one. If the
 * value of the second element is larger, no swap occurs, and pivotValue is
 * compared to the third element in the array...Finally, the first value in
 * the array is swapped with the value of the current index, and the current
 * index is returned. At that point, all values with indicies less than the
 * pivotIndex should be smaller than the pivotValue.
 *
 * @param  Index of first element in array
 *         Index of last element in array
 *         Array of names
 *         Array of prices
 * @return Index
 ******************************************************************************/

int pivot(int first, int last, float appPrices[], string appNames[])
{
	float pivotValue;
	int pivotIndex;

	// Set the comparison value and initial index value to the leftmost value
	// in the defined array
	pivotIndex = first;
	pivotValue = appPrices[first];

	// Iterate through array defined between first and last
	for (int i = first + 1; i <= last; i++)
	{
		if (appPrices[i] < pivotValue)
		{
			pivotIndex++;
			swapApps(i, pivotIndex, appNames, appPrices);
		}
	}
	// Swap the first element with the element at the new pivotIndex
	swapApps(first, pivotIndex, appNames, appPrices);
	return pivotIndex;
}

/******************************************************************************
 * Starting with the full length of the array, quickSort uses 'pivot' to
 * divide the original array into successively smaller pieces. As 'pivot' is
 * called, the sub-array on either side of the pivotIndex is sorted in order
 * of smallest to greatest. The function continues recursively until 'first'
 * and 'last' are equal and each sub-array only contains one element.
 *
 * @param void
 * @return void
 ******************************************************************************/

void quickSort(int first, int last, string appNames[], float appPrices[])
{
	int pivotIndex;

	// Check that first index is smaller than last index.
	if (first < last)
	{
		// Sort, and find pivot index of whole array.
		pivotIndex = pivot(first, last, appPrices, appNames);

		// Repeat the above for the sub-arrays on either side of the value
		// returned by pivot.
		quickSort(first, pivotIndex - 1, appNames, appPrices);
		quickSort(pivotIndex + 1, last, appNames, appPrices);
	}
}

/******************************************************************************
 * Compares desired price - searchPrice - with elements in the array until a
 * match is found.
 * The index center entry of the array is calculated based on
 * the indicies of the first and last entries in the array. The value at the
 * center of the array is then compared to the desired value. If the middle
 * value is lower than the desired value the function is called again, using
 * the middle + 1 index as the new lowest index. If the middle value is greater
 * than the desired value the function is called again using the middle - 1 and
 * the new lowest index. The recursion continues until the value of the array
 * at the middle index matches searchPrice.
 * This function is only effective with pre-sorted arrays.
 *
 * @param  Desired price
 *         Index of first application in array
 *         Index of last application in array
 *         Array of application prices
 * @return Index of application with desired price
 ******************************************************************************/

int binarySearchForPrice(float searchPrice, int first, int last,
		float appPrices[])
{
	int middle = (first + last) / 2;

	if (last < first)
	{
		// If the last index is smaller than the first there's a problem.
		return -1;
	}
	else if (searchPrice == appPrices[middle])
	{
		// Return the index of the correct price once it has been found.
		return middle;
	}
	else if (searchPrice < appPrices[middle])
	{
		// Search lower half of array.
		return binarySearchForPrice(searchPrice, first, middle + 1, appPrices);
	}
	else if (searchPrice > appPrices[middle])
	{
		// Search upper half of array.
		return binarySearchForPrice(searchPrice, middle - 1, last, appPrices);
	}
	return 0;
}
